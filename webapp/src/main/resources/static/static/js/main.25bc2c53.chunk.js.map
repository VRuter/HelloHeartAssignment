{"version":3,"sources":["components/BloodTestConstants.js","components/BloodTestEvaluator.js","App.js","index.js"],"names":["TestTypes","EvaluationResults","BloodTestEvaluator","props","state","results","isProcessing","formValidity","testName","testValue","onSubmit","bind","testNameInput","React","createRef","testValueInput","event","preventDefault","formValues","this","current","value","formValidationResult","validateForm","valid","setState","validationValues","testResultObject","type","sendRequest","testNameValidity","testValueValidity","length","undefined","Number","isNaN","requestObject","errorMessage","fetch","method","headers","body","JSON","stringify","then","response","ok","status","json","data","error","catch","console","warn","responseObj","hasOwnProperty","matchSuccess","officialName","evaluationResult","valueName","Alert","color","validateResponse","Card","CardTitle","CardSubtitle","CardBody","Form","className","Label","for","Input","onChange","resetValidationStatus","readOnly","invalid","id","innerRef","FormFeedback","Button","disabled","Spinner","formatResults","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.25bc2c53.chunk.js","sourcesContent":["export const TestTypes = {\r\n    NUMERIC: \"numeric\"\r\n}\r\n\r\nexport const EvaluationResults = {\r\n    GOOD: \"Good\",\r\n    BAD: \"Bad\",\r\n    UNKNOWN: \"Unknown\"    \r\n}","import React from 'react';\r\nimport { Card, CardTitle, CardSubtitle, CardBody, Input, Button, Label, Form, FormFeedback, Spinner, Alert } from 'reactstrap';\r\nimport { TestTypes, EvaluationResults } from './BloodTestConstants';\r\n\r\nexport default class BloodTestEvaluator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      results: null,\r\n      isProcessing: false,\r\n      formValidity: {\r\n        testName: true,\r\n        testValue: true\r\n      }\r\n    }\r\n\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.testNameInput = React.createRef();\r\n    this.testValueInput = React.createRef();\r\n  }\r\n\r\n  /**\r\n   * Callback for submitting the form. Also handles validation and initiates the backend request.\r\n   */\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n\r\n    let formValues = {\r\n      testName: this.testNameInput.current.value,\r\n      value: this.testValueInput.current.value\r\n    }\r\n\r\n    let formValidationResult = this.validateForm(formValues);\r\n\r\n    if (formValidationResult.valid !== true) {\r\n      this.setState({ formValidity: formValidationResult.validationValues });\r\n    } else {\r\n      let testResultObject = {\r\n        type: TestTypes.NUMERIC,\r\n        ...formValues\r\n      }\r\n\r\n      this.setState({ isProcessing: true });\r\n      this.sendRequest(testResultObject);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Explicitly validates the form inputs and returns the validation result and validation values.\r\n   */\r\n  validateForm(formValues) {\r\n    let testNameValidity = true;\r\n    let testValueValidity = true;\r\n\r\n    if (!(formValues.testName && formValues.testName.length > 0)) {\r\n      testNameValidity = false;\r\n    }\r\n\r\n    if (!(formValues.value !== null && formValues.value !== undefined && formValues.value.length > 1 && !Number.isNaN(formValues.value))) {\r\n      testValueValidity = false;\r\n    }\r\n\r\n    return {\r\n      valid: (testNameValidity && testValueValidity),\r\n      validationValues: {\r\n        testName: testNameValidity,\r\n        testValue: testValueValidity\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends the backend request for the form inputs. Handles the response and changes component state accordingly.\r\n   */\r\n  sendRequest(requestObject) {\r\n    const errorMessage = \"An error occured, failed to evaluate result.\";\r\n\r\n    fetch(\"/api/evaluateSingleTest\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(requestObject)\r\n      }\r\n    )\r\n      .then(response => {\r\n        this.setState({ isProcessing: false });\r\n\r\n        if (response.ok && response.status == \"200\") {\r\n          response.json().then(data => {\r\n            this.setState({ results: { error: null, data: data } });\r\n          }).catch(error => {\r\n            console.warn(error);\r\n            this.setState({ results: { error: errorMessage, data: null } });\r\n          });\r\n        } else {\r\n          console.warn(`Failed to fetch, HTTP status: ${response.status}`);\r\n          this.setState({ results: { error: errorMessage, data: null } });\r\n        }\r\n      }).catch(error => {\r\n        console.warn(error);\r\n        this.setState({ isProcessing: false, results: { error: errorMessage, data: null } });\r\n      })\r\n  }\r\n\r\n  /**\r\n   * Validates response object structure to make sure it can be parsed properly. Returns boolean.\r\n   */\r\n  validateResponse(responseObj) {\r\n    if (responseObj.hasOwnProperty(\"matchSuccess\")) {\r\n      if (responseObj.matchSuccess === true) {\r\n        return responseObj.hasOwnProperty(\"officialName\") && responseObj.officialName && responseObj.hasOwnProperty(\"evaluationResult\") && responseObj.evaluationResult\r\n      } else {\r\n        return responseObj.hasOwnProperty(\"evaluationResult\") && responseObj.evaluationResult\r\n      }\r\n    }\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Fires to reset a form field's validation status. Should be called when the field is changed.\r\n   */\r\n  resetValidationStatus(valueName) {\r\n    this.setState({\r\n      formValidity: {\r\n        ...this.state.formValidity,\r\n        [valueName]: true\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Returns a JSX object according to the response recieved from the backend.\r\n   */\r\n  formatResults(results) {\r\n    if (results.error) {\r\n      return <Alert color=\"danger\">{results.error}</Alert>\r\n    } else {\r\n      if (this.validateResponse(results.data)) {\r\n\r\n        let color;\r\n        switch (results.data.evaluationResult) {\r\n          case EvaluationResults.GOOD:\r\n            color = \"success\";\r\n            break;\r\n          case EvaluationResults.BAD:\r\n            color = \"warning\";\r\n            break;\r\n          case EvaluationResults.UNKNOWN:\r\n            color = \"info\";\r\n            break;\r\n          default:\r\n            color = \"info\";\r\n            break;\r\n        }\r\n\r\n        if (results.data.matchSuccess === true) {\r\n          return <Alert color={color}>{results.data.officialName}: {results.data.evaluationResult}</Alert>\r\n        } else {\r\n          return <Alert color={color}>{results.data.evaluationResult}</Alert>\r\n        }\r\n      } else {\r\n        console.warn(results.data);\r\n        return <Alert color=\"danger\">An error occured, data could not be formatted properly.</Alert>\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardTitle>Blood Test Results</CardTitle>\r\n        <CardSubtitle>Please enter your blood test result name and value.</CardSubtitle>\r\n        <CardBody>\r\n          <div>\r\n            <div>\r\n              <Form onSubmit={this.onSubmit}>\r\n                <div className=\"inputs-container\">\r\n                  <div>\r\n                    <div className=\"textbox-input\">\r\n                      <Label for=\"test-name\">Test Name:</Label>\r\n                      <Input onChange={() => { if (!this.state.formValidity.testName) this.resetValidationStatus(\"testName\") }} readOnly={this.state.isProcessing} invalid={!this.state.formValidity.testName} id=\"test-name\" type=\"text\" innerRef={this.testNameInput} />\r\n                      <FormFeedback>Please provide a valid name</FormFeedback>\r\n                    </div>\r\n                    <div className=\"textbox-input\">\r\n                      <Label for=\"test-value\">Test Result Value:</Label>\r\n                      <Input onChange={() => { if (!this.state.formValidity.testValue) this.resetValidationStatus(\"testValue\") }} readOnly={this.state.isProcessing} invalid={!this.state.formValidity.testValue} id=\"test-value\" type=\"float\" innerRef={this.testValueInput} />\r\n                      <FormFeedback>Please provide a numeric value</FormFeedback>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"submit-button\">\r\n                    <Button className=\"submit-button-override\" disabled={this.state.isProcessing}>EVALUATE</Button>\r\n                    <div className={`processing-spinner ${!this.state.isProcessing ? \"hidden\" : \"\"}`}><Spinner /></div>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n            <div className={`results-container ${this.state.results == null ? \"hidden\" : \"\"}`}>\r\n              {this.state.results && this.formatResults(this.state.results)}\r\n            </div>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}","import './App.css';\n\nimport BloodTestEvaluator from './components/BloodTestEvaluator';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BloodTestEvaluator />\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}