{"version":3,"sources":["TestTypes.js","BloodTestEvaluator.js","App.js","index.js"],"names":["TestTypes","BloodTestEvaluator","props","state","results","isProcessing","onSubmit","bind","testNameInput","React","createRef","testValueInput","event","preventDefault","testResultObject","type","testName","this","current","value","setState","sendRequest","requestObject","errorMessage","fetch","method","headers","body","JSON","stringify","then","response","ok","status","json","data","error","catch","console","warn","Alert","color","matchSuccess","officialName","evaluationResult","Card","CardTitle","CardSubtitle","CardBody","Form","className","Label","for","Input","readOnly","required","id","innerRef","FormFeedback","Button","disabled","Spinner","formatResults","Component","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.842c9bcc.chunk.js","sourcesContent":["export const TestTypes = {\r\n    NUMERIC: \"numeric\"\r\n}","import React from 'react';\r\nimport { Card, CardTitle, CardSubtitle, CardBody, Input, Button, Label, Form, FormFeedback, Spinner, Alert } from 'reactstrap';\r\nimport { TestTypes } from './TestTypes';\r\n\r\nexport default class BloodTestEvaluator extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      results: null,\r\n      isProcessing: false\r\n    }\r\n\r\n    this.onSubmit = this.onSubmit.bind(this);\r\n\r\n    this.testNameInput = React.createRef();\r\n    this.testValueInput = React.createRef();\r\n  }\r\n\r\n  onSubmit(event) {\r\n    event.preventDefault();\r\n    let testResultObject = {\r\n      type: TestTypes.NUMERIC,\r\n      testName: this.testNameInput.current.value,\r\n      value: this.testValueInput.current.value\r\n    }\r\n\r\n    this.setState({ isProcessing: true });\r\n    this.sendRequest(testResultObject);\r\n  }\r\n\r\n  sendRequest(requestObject) {\r\n    const errorMessage = \"An error occured, failed to evaluate result.\";\r\n\r\n    // Mock request with a timeout to simulate waiting state\r\n    /*\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve({ ok: true, json: () => { return Promise.resolve({ matchSuccess: true, officialName: \"test name\", evaluationResult: \"Good\" }) } })\r\n      }, 1000)\r\n    })\r\n    */\r\n    fetch(\"/api/evaluateSingleTest\",\r\n      {\r\n        method: \"POST\",\r\n        headers: { \"Content-Type\": \"application/json\" },\r\n        body: JSON.stringify(requestObject)\r\n      }\r\n    )\r\n      .then(response => {\r\n        this.setState({ isProcessing: false });\r\n\r\n        if (response.ok && response.status == \"200\") {\r\n          response.json().then(data => {\r\n            this.setState({ results: { error: null, data: data } });\r\n          }).catch(error => {\r\n            console.warn(error);\r\n            this.setState({ results: { error: errorMessage, data: null } });\r\n          });\r\n        } else {\r\n          console.warn(`Failed to fetch, HTTP status: ${response.status}`);\r\n          this.setState({ results: { error: errorMessage, data: null } });\r\n        }\r\n      }).catch(error => {\r\n        console.warn(error);\r\n        this.setState({ isProcessing: false, results: { error: errorMessage, data: null } });\r\n      })\r\n  }\r\n\r\n  formatResults(results) {\r\n    if (results.error) {\r\n      return <Alert color=\"danger\">{results.error}</Alert>\r\n    } else {\r\n      if (results.data.matchSuccess === true) {\r\n        return <Alert color=\"success\">{results.data.officialName} : {results.data.evaluationResult}</Alert>\r\n      } else {\r\n        return <Alert color=\"warning\">{results.data.evaluationResult}</Alert>\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Card>\r\n        <CardTitle>Blood Test Results</CardTitle>\r\n        <CardSubtitle>Please enter your blood test result name and value.</CardSubtitle>\r\n        <CardBody>\r\n          <div>\r\n            <div>\r\n              <Form onSubmit={this.onSubmit}>\r\n                <div className=\"inputs-container\">\r\n                  <div>\r\n                    <div className=\"textbox-input\">\r\n                      <Label for=\"test-name\">Test Name:</Label>\r\n                      <Input readOnly={this.state.isProcessing} required id=\"test-name\" type=\"text\" innerRef={this.testNameInput} />\r\n                      <FormFeedback>Please provide a name</FormFeedback>\r\n                    </div>\r\n                    <div className=\"textbox-input\">\r\n                      <Label for=\"test-value\">Test Result Value:</Label>\r\n                      <Input readOnly={this.state.isProcessing} required id=\"test-value\" type=\"number\" innerRef={this.testValueInput} />\r\n                      <FormFeedback>Please provide a value</FormFeedback>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"submit-button\">\r\n                    <Button className=\"submit-button-override\" disabled={this.state.isProcessing}>EVALUATE</Button>\r\n                    <div className={`processing-spinner ${!this.state.isProcessing ? \"hidden\" : \"\"}`}><Spinner /></div>\r\n                  </div>\r\n                </div>\r\n              </Form>\r\n            </div>\r\n            <div className={`results-container ${this.state.results == null ? \"hidden\" : \"\"}`}>\r\n              {this.state.results && this.formatResults(this.state.results)}\r\n            </div>\r\n          </div>\r\n        </CardBody>\r\n      </Card>\r\n    )\r\n  }\r\n}","import './App.css';\n\nimport BloodTestEvaluator from './BloodTestEvaluator';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      <BloodTestEvaluator />\n    </div >\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}